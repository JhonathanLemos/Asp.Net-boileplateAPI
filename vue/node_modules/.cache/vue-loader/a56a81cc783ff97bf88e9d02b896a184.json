{"remainingRequest":"C:\\Users\\lemos\\OneDrive\\Documentos\\My Web Sites\\7.3.0\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lemos\\OneDrive\\Documentos\\My Web Sites\\7.3.0\\vue\\src\\views\\ordemCompra\\ViewOrdemCompraEdit.vue?vue&type=template&id=1c72438c&scoped=true&","dependencies":[{"path":"C:\\Users\\lemos\\OneDrive\\Documentos\\My Web Sites\\7.3.0\\vue\\src\\views\\ordemCompra\\ViewOrdemCompraEdit.vue","mtime":1680609356653},{"path":"C:\\Users\\lemos\\OneDrive\\Documentos\\My Web Sites\\7.3.0\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683229777571},{"path":"C:\\Users\\lemos\\OneDrive\\Documentos\\My Web Sites\\7.3.0\\vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1683229781713},{"path":"C:\\Users\\lemos\\OneDrive\\Documentos\\My Web Sites\\7.3.0\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683229777571},{"path":"C:\\Users\\lemos\\OneDrive\\Documentos\\My Web Sites\\7.3.0\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1683229780390}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}